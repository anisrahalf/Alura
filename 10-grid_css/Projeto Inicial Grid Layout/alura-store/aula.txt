 Precisamos especificar no código, que nosso template será dividido em áreas, como já sabemos. Para realizarmos essa especificação, usaremos a propriedade grid-template-areas, quer receberá as strings cabecalho, conteudo e rodape. Feito isso, ainda temos algumas configurações adicionais a serem realizadas. Uma delas é especificar qual será o tamanho das colunas e linhas do site, e isso será feito por meio de grid-template-columns. Como utilizaremos apenas uma coluna, definiremos como auto. Em seguida, definiremos o tamanho das linhas via grid-template-rows:

.app {
    background: #f1f1f1;
    display: grid;  
    grid-template-areas: 
        "cabecalho"
        "conteudo"
        "rodape";
    grid-template-columns: auto;
    grid-template-rows: 50px auto auto; 
}

Ao acessarmos o arquivo no navegador, veremos as três áreas divididas por cor, sendo o cabeçalho marcado pelo verde, conteúdo vermelho e rodapé azul. Apensar de termos essa organização de cores, ainda precisamos explicitar para o Grid que um cabeçalho é de fato um cabeçalho e deve se relacionar com a classe cabecalho, por exemplo. Retornando ao código de style.css, usaremos a propriedade grid-area, que receberá o nome de cada área correspondente.

.app {
    background: #f1f1f1;
    display: grid;  
    grid-template-areas: 
        "cabecalho"
        "conteudo"
        "rodape";
    grid-template-columns: auto;
    grid-template-rows: 50px auto auto; 
}

.cabecalho {
    background #00cc99
    grid-area: cabecalho;
}

.conteudo {
    background #ff8080
    grid-area: conteudo;
}

.rodape {
    background #0099ff;
    grid-area: rodape;
}COPIAR CÓDIGO
(10:20) O CSS Grid Layout é muito utilizado por possuir essa facilidade: podemos definir um template, estabelecermos áreas e associar elementos específicos a estas áreas.
------------------------------------
Sabemos que através do CSS Grid Layout é possível dizer para os elementos onde eles devem começar e terminar, essa definição pode ser feita da utilizando o:

grid-column-start
grid-column-end
grid-row-start
grid-row-endCOPIAR CÓDIGO
Assim conseguimos dizer para o elemento em qual coluna ele deve começar e em qual deve terminar, o mesmo também pode ser feito para as linhas.

Como podemos dizer para um elemento ocupar toda as colunas e linhas, sendo que o nosso layout possui 3 colunas e 2 linhas?

grid-column-start: 1;
grid-column-end: 4;
grid-row-start: 1;
grid-row-end: 3;

Correto, estamos preenchendo as três colunas e duas linhas, informamos 4 para as colunas e 3 para as linhas pois ambos são exclusivos.
-------------------------------------------
No exercício anterior, precisamos informar onde os elementos devem começar e terminar, mas, fizemos utilizando a propriedade de forma longa, para o mesmo exemplo, possuímos um atalho (shorthand), sendo:

grid-column 
grid-rowCOPIAR CÓDIGO
Lembrando que temos um layout de 3 colunas e duas linhas, precisamos fazer com que nosso elemento ocupe todo o grid.

Como podemos realizar o mesmo posicionamento referente ao exemplo anterior?

grid-column: 1/4;
grid-row: 1/3;

Correto, estamos preenchendo as três colunas e duas linhas, informamos 4 para as colunas e 3 para as linhas pois ambos são exclusivos.
------------------------------------------
Realizamos a definição de cinco cards por linha, dessa maneira, precisamos calcular o tamanho do nosso card: 100% / 5 = 20%, mas também adicionamos margin-right de 1rem para que, entre um card e outro, exista um espaçamento.

Precisamos levar em consideração esse espaçamento na hora de definir o tamanho dos nossos card's, como podemos fazer isso?

width: calc(20% - 1rem);

Correto, estamos pegando os 20% que é o tamanho dos nossos card's e tirando 1rem deles.
-----------------------------------------
Quando precisamos deixar um site responsivo, muitas vezes é necessário aplicar estilos diferentes para tamanhos de telas diferentes.Para isso, usamos media queries. Através delas, informamos que determinados estilos só devem ser aplicados para determinados tamanhos de tela.

Como podemos criar uma media query que aplique estilos apenas para telas maiores que 768px?
@media screen and (min-width: 768px) {}

Correto, para telas maiores ou igual á 768px serão aplicados os estilos.
------------------------